load("@bazel_gazelle//:def.bzl", "DEFAULT_LANGUAGES", "gazelle", "gazelle_binary")
load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@buildifier_prebuilt//:rules.bzl", "buildifier", "buildifier_test", "buildozer_binary")
load(":version.bzl", "BAZEL_VERSION")

# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
package(default_visibility = ["//visibility:public"])


# gazelle:python_root python/src
#
# load("@gazelle//:def.bzl", "gazelle")
# load("@rules_go//go:def.bzl", "go_library", "nogo")
licenses(["notice"])

exports_files([
    "LICENSE",
    "version.bzl",
])

exports_files(
    glob(["*.md"]),
    visibility = ["//docs:__subpackages__"],
)

filegroup(
    name = "distribution",
    srcs = [
        "BUILD.bazel",
        "MODULE.bazel",
        "WORKSPACE",
        "version.bzl",
    ],
    visibility = [
        "//:__subpackages__",
    ],
)

bzl_library(
    name = "version_bzl",
    srcs = ["version.bzl"],
    visibility = ["//:__subpackages__"],
)

# Reexport of all bzl files used to allow downstream rules to generate docs
# without shipping with a dependency on Skylib
filegroup(
    name = "bzl",
    srcs = [
        # Requires Bazel 0.29 onward for public visibility of these .bzl files.
        "@bazel_tools//tools/python:python_version.bzl",
        "@bazel_tools//tools/python:srcs_version.bzl",
        "@bazel_tools//tools/python:toolchain.bzl",
        "@bazel_tools//tools/python:utils.bzl",
    ],
    visibility = ["//visibility:public"],
)

genrule(
    name = "assert_bazelversion",
    srcs = [".bazelversion"],
    outs = ["assert_bazelversion_test.sh"],
    cmd = """\
set -o errexit -o nounset -o pipefail
current=$$(cat "$(execpath .bazelversion)")
cat > "$@" <<EOF
#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail
if [[ \"$${{current}}\" != \"{expected}\" ]]; then
    >&2 echo "ERROR: current bazel version '$${{current}}' is not the expected '{expected}'"
    exit 1
fi
EOF
""".format(
        expected = BAZEL_VERSION,
    ),
    executable = True,
)

gazelle(
    name = "gazelle",
    args = ["-build_file_name=BUILD.bazel"],
    gazelle = ":gazelle_bin",
    visibility = ["//visibility:private"],

)

gazelle_binary(
    name = "gazelle_bin",
    languages = [
        "@rules_python_gazelle_plugin//python:python",
        "@bazel_gazelle//language/go",  # Built-in rule from gazelle for Golang.
        "@bazel_gazelle//language/proto",  # Built-in rule from gazelle for Protos.
        # Any languages that depend on Gazelle's proto plugin must come after it.
        # "@gazelle_rust//rust_language",  # Couldn't get this to work required additional overrides wait for package to update to bzlmod
    ],
    # visibility = ["//visibility:public"],
    visibility = ["//visibility:private"],
)

sh_test(
    name = "assert_bazelversion_test",
    srcs = [":assert_bazelversion_test.sh"],
)

# Buildifier formats all BUILD files in the workspace.
buildifier(
    name = "buildifier",
    exclude_patterns = [
        "./.git/*",
    ],
    lint_mode = "fix",
    mode = "fix",
)

# This test checks that all BUILD files (etc.) are formatted correctly.  Run "bazel run //:buildifier" to auto-fix them.
buildifier_test(
    name = "buildifier_test",
    size = "small",
    exclude_patterns = [
        "./.git/*",
    ],
    lint_mode = "warn",
    mode = "diff",
    no_sandbox = True,
    tags = ["style"],
    workspace = "//:MODULE.bazel",
)

# Run the buildozer command.
buildozer_binary(
    name = "buildozer",
)
