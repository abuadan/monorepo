###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################
module(
    name = "monorepo",
    version = "0.0.0",
    compatibility_level = 1,
)

bazel_dep(name = "bazel_features", version = "1.10.0")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "platforms", version = "0.0.10")

# Those are loaded only when using py_proto_library
bazel_dep(name = "rules_python", version = "0.32.1")
bazel_dep(name = "rules_go", version = "0.47.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "rules_proto", version = "6.0.0")
bazel_dep(name = "protobuf", version = "26.0", repo_name = "com_google_protobuf")
bazel_dep(name = "rules_rust", version = "0.42.1")

# Gazelle for auto BUILD generation. See
# https://github.com/bazelbuild/rules_python/blob/main/gazelle/README.md
# First install ruleset specifc to python, then gazelle itself.
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.32.1")  # same version as rules_python
bazel_dep(name = "gazelle", version = "0.36.0", repo_name = "bazel_gazelle")

bazel_dep(name = "stardoc", version = "0.6.2", dev_dependency = True, repo_name = "io_bazel_stardoc")
bazel_dep(name = "rules_bazel_integration_test", version = "0.23.0", dev_dependency = True)
bazel_dep(
    name = "buildifier_prebuilt",
    version = "6.4.0",
    dev_dependency = True,
)

bazel_dep(name = "rules_poetry", version = "0.3.4")
# bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.6.1")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

############ ===== DEV ONLY DEPS AND SETUP BELOW HERE ===== #######################################

bazel_binaries = use_extension(
    "@rules_bazel_integration_test//:extensions.bzl",
    "bazel_binaries",
    dev_dependency = True,
)

################################## Utils ###########################################
# Keep in sync with //:version.bzl
bazel_binaries.local(
    name = "self",
    path = "tests/integration/bazel_from_env",
)
bazel_binaries.download(version = "latests")
bazel_binaries.download(version = "rolling")
use_repo(
    bazel_binaries,
    "bazel_binaries",
    # These don't appear necessary, but are reported as direct dependencies
    # that should be use_repo()'d, so we add them as requested
    "bazel_binaries_bazelisk",
    "build_bazel_bazel_7_0_2",
    "build_bazel_bazel_rolling",
    "build_bazel_bazel_self",
)
###################### Python #############################################

###### Set up #################
internal_deps = use_extension("@rules_python//python/private/bzlmod:internal_deps.bzl", "internal_deps")
internal_deps.install()
use_repo(
    internal_deps,
    "rules_python_internal",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.12",
)
use_repo(python, "pythons_hub")

register_toolchains("@pythons_hub//:all")

# Enable pip
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

# Configure how we fetch python dependencies via pip
pip.parse(
    # Use the bazel downloader for pulling pypi packages.
    experimental_index_url = "https://pypi.org/simple",
    # This name is what gets used in other BUILD files with `load()`.
    hub_name = "pypi",
    python_version = "3.12",
    requirements_lock = "//python:requirements.lock",
)

# Same as WORKSPACE install_deps() - actually install the python deps.
use_repo(pip, "pypi")

poetry = use_extension("@rules_poetry//python:extensions.bzl", "poetry")
poetry.parse(
    name = "poetry",
    lock = "//python:poetry.lock",
    pyproject = "//python:pyproject.toml",
)
use_repo(poetry, "poetry")

############ ===== DEV ONLY DEPS AND SETUP BELOW HERE ===== #######################################

dev_pip = use_extension(
    "@rules_python//python/extensions:pip.bzl",
    "pip",
    dev_dependency = True,
)
dev_pip.parse(
    experimental_requirement_cycles = {
        "sphinx": [
            "sphinx",
            "sphinxcontrib-serializinghtml",
            "sphinxcontrib-qthelp",
            "sphinxcontrib-htmlhelp",
            "sphinxcontrib-devhelp",
            "sphinxcontrib-applehelp",
        ],
    },
    hub_name = "dev_pip",
    python_version = "3.12",
    requirements_lock = "//:python/requirements.lock",
)

###################### RUST #############################################

GAZELLE_RUST_COMMIT = "aef7695c4a9b6c3e32255ed48570e62199f52537"

GAZELLE_RUST_SHA256 = None

http_archive(
    name = "gazelle_rust",
    sha256 = GAZELLE_RUST_SHA256,
    strip_prefix = "gazelle_rust-{}".format(GAZELLE_RUST_COMMIT),
    url = "https://github.com/Calsign/gazelle_rust/archive/{}.zip".format(GAZELLE_RUST_COMMIT),
)

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.77.2"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
)
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//rust:Cargo.lock",
    manifests = ["//rust:Cargo.toml"],
)
use_repo(crate, "crates")

# # Example of using crate_universe. For gazelle_rust to work correctly with crate_universe
# # dependencies, this must be paired with two gazelle directives; see BUILD.bazel.
crates_repository = use_repo_rule("@rules_rust//crate_universe:defs.bzl", "crates_repository")

crates_repository(
    name = "crate_index",
    cargo_lockfile = "//:rust/Cargo.lock",
    lockfile = "//:rust/Cargo.Bazel.lock",
    manifests = ["//:rust/Cargo.toml"],
)
###################### Go #############################################

###### Set up #################

###################### Kotlin #############################################

###### Set up #################
