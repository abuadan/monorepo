###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################
module(
    name = "monorepo",
    version = "0.0.0",
)

bazel_dep(name = "bazel_features", version = "1.10.0")
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "gazelle", version = "0.36.0", repo_name = "bazel_gazelle")
bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.6.1")

# Those are loaded only when using py_proto_library
bazel_dep(name = "rules_go", version = "0.47.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "rules_proto", version = "6.0.0")
bazel_dep(name = "protobuf", version = "26.0", repo_name = "com_google_protobuf")

bazel_dep(name = "stardoc", version = "0.6.2", dev_dependency = True, repo_name = "io_bazel_stardoc")
bazel_dep(name = "rules_bazel_integration_test", version = "0.23.0", dev_dependency = True)

bazel_dep(name = "rules_python", version = "0.31.0")
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.31.0", repo_name = "rules_python_gazelle_plugin")
bazel_dep(name = "rules_poetry", version = "0.3.4")
bazel_dep(name = "rules_rust", version = "0.42.1")

bazel_dep(
    name = "buildifier_prebuilt",
    version = "6.4.0",
    dev_dependency = True,
)

############ ===== DEV ONLY DEPS AND SETUP BELOW HERE ===== #######################################

bazel_binaries = use_extension(
    "@rules_bazel_integration_test//:extensions.bzl",
    "bazel_binaries",
    dev_dependency = True,
)

################################## Utils ###########################################
# Keep in sync with //:version.bzl
bazel_binaries.local(
    name = "self",
    path = "tests/integration/bazel_from_env",
)
bazel_binaries.download(version = "7.0.2")
bazel_binaries.download(version = "rolling")
use_repo(
    bazel_binaries,
    "bazel_binaries",
    # These don't appear necessary, but are reported as direct dependencies
    # that should be use_repo()'d, so we add them as requested
    "bazel_binaries_bazelisk",
    "build_bazel_bazel_7_0_2",
    "build_bazel_bazel_rolling",
    "build_bazel_bazel_self",
)
###################### Python #############################################

###### Set up #################
internal_deps = use_extension("@rules_python//python/private/bzlmod:internal_deps.bzl", "internal_deps")
internal_deps.install()
use_repo(
    internal_deps,
    "rules_python_internal",
)

# We need to do another use_extension call to expose the "pythons_hub"
# repo.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# The default toolchain to use if nobody configures a toolchain.
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.12",
)
use_repo(python, "pythons_hub")

#
# # This call registers the Python toolchains.
register_toolchains("@pythons_hub//:all")

# Use the extension, pip.parse, to call the `pip_repository` rule that invokes
# `pip`, with `incremental` set. The pip call accepts a locked/compiled
# requirements file and installs the dependencies listed within.
# Those dependencies become available in a generated `requirements.bzl` file.
# You can instead check this `requirements.bzl` file into your repo.
# Because this project has different requirements for windows vs other
# operating systems, we have requirements for each.
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    # The interpreter_target attribute points to the interpreter to
    # use for running pip commands to download the packages in the
    # requirements file.
    # As a best practice, we use the same interpreter as the toolchain
    # that was configured above; this ensures the same Python version
    # is used for both resolving dependencies and running tests/binaries.
    # If this isn't specified, then you'll get whatever is locally installed
    # on your system.
    python_version = "3.12",
    requirements_lock = "//:python/requirements.lock",
    # requirements_windows = "//:python/requirements_windows.txt",
)

# Imports the pip toolchain generated by the given module extension into the scope of the current module.
use_repo(pip, "pip")

############ ===== DEV ONLY DEPS AND SETUP BELOW HERE ===== #######################################

dev_pip = use_extension(
    "@rules_python//python/extensions:pip.bzl",
    "pip",
    dev_dependency = True,
)
dev_pip.parse(
    experimental_requirement_cycles = {
        "sphinx": [
            "sphinx",
            "sphinxcontrib-serializinghtml",
            "sphinxcontrib-qthelp",
            "sphinxcontrib-htmlhelp",
            "sphinxcontrib-devhelp",
            "sphinxcontrib-applehelp",
        ],
    },
    hub_name = "dev_pip",
    python_version = "3.12",
    requirements_lock = "//:python/requirements.lock",
)

###################### RUST #############################################

# GAZELLE_RUST_COMMIT = "aef7695c4a9b6c3e32255ed48570e62199f52537"
#
# GAZELLE_RUST_SHA256 = None
#
# http_archive(
#     name = "gazelle_rust",
#     sha256 = GAZELLE_RUST_SHA256,
#     strip_prefix = "gazelle_rust-{}".format(GAZELLE_RUST_COMMIT),
#     url = "https://github.com/Calsign/gazelle_rust/archive/{}.zip".format(GAZELLE_RUST_COMMIT),
# )

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.77.2"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

# crates_repository = use_extension("@rules_rust//crate_universe:defs.bzl", "crates_repository")
# crate = use_extension("@rules_rust//crate_universe:defs.bzl", "crate")
# # Example of using crate_universe. For gazelle_rust to work correctly with crate_universe
# # dependencies, this must be paired with two gazelle directives; see BUILD.bazel.
# crates_repository(
#     name = "crate_index",
#     cargo_lockfile = "//:rust/Cargo.lock",
#     lockfile = "//rust/:Cargo.Bazel.lock",
#     manifests = ["//rust/:Cargo.toml"],
# )
#
#
#

###################### Go #############################################

###### Set up #################

###################### Kotlin #############################################

###### Set up #################
